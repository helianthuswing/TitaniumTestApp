From c10dead00f8e2de0f30321d173b3236da864ac7d Mon Sep 17 00:00:00 2001
From: exilis <exilis@gmail.com>
Date: Thu, 24 Feb 2011 20:20:58 -0800
Subject: [PATCH] - moved window.open() to just after window.add(view) so that webview is
 able to show popup dialogs in the right order.
 - added clearing access token functionality
 - changed async flow
 - adjusted size of the webview
 - fixed onerror handlers

Note: This version still has a problem on calling the callback function after
showing the auth-ui. However, I guess it cannot be done without
breaking api compatibility of oauth_adapter, so I would rather to fix the titanium code
to be able to handle the sync mode of HTTPClient.open() in the proper
way. Also, I've not tested this code on iOS environment, and I think
there must be some implications.
---
 lib/oauth_adapter.js |  138 ++++++++++++++++++++++++++++++-------------------
 lib/twitter_api.js   |   21 ++++++--
 2 files changed, 101 insertions(+), 58 deletions(-)

diff --git a/lib/oauth_adapter.js b/lib/oauth_adapter.js
index 2762f92..1191a03 100644
--- a/lib/oauth_adapter.js
+++ b/lib/oauth_adapter.js
@@ -47,14 +47,17 @@
  {
 	 // this function will be called as soon as the application is authorized
      var receivePin = function() {
-		 // get the access token with the provided pin/oauth_verifier
-         oAuthAdapter.getAccessToken('https://api.twitter.com/oauth/access_token');
-		 // save the access token
-         oAuthAdapter.saveAccessToken('twitter');
+        oAuthAdapter.getAccessToken('https://api.twitter.com/oauth/access_token', function(){
+          oAuthAdapter.saveAccessToken('twitter');
+        });
      };
 
 	 // show the authorization UI and call back the receive PIN function
-     oAuthAdapter.showAuthorizeUI('https://api.twitter.com/oauth/authorize?' + oAuthAdapter.getRequestToken('https://api.twitter.com/oauth/request_token'), receivePin);
+     oAuthAdapter.getRequestToken('https://api.twitter.com/oauth/request_token', function(token){
+       if(token){
+         oAuthAdapter.showAuthorizeUI('https://api.twitter.com/oauth/authorize?' + token , receivePin);
+       }
+     });
  }
 
  */
@@ -64,8 +67,8 @@
  *
  * Save them locally in a lib subfolder
  */
-Ti.include('sha1.js');
-Ti.include('oauth.js');
+Ti.include(path_lib+'sha1.js');
+Ti.include(path_lib+'oauth.js');
 
 // create an OAuthAdapter instance
 var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
@@ -144,6 +147,27 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
         Ti.API.debug('Saving access token: done.');
     };
 
+    this.clearAccessToken = function(pService){
+        var file = Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory, pService + '.config');
+        if (file == null) file = Ti.Filesystem.createFile(Ti.Filesystem.applicationDataDirectory, pService + '.config');
+        file.write(JSON.stringify(
+        {
+            accessToken: null,
+            accessTokenSecret: null
+        }
+        ));
+        accessToken = null;
+        accessTokenSecret = null;
+    };
+
+    this.clearActionsQueue = function(){
+        while ((q = actionsQueue.shift()) != null){
+          var p = q.parameters || [];
+          if(p.onError)
+            p.onError({error:'clearActionsQueue() was called'});
+        }
+    };
+
     // will tell if the consumer is authorized
     this.isAuthorized = function()
     {
@@ -169,7 +193,7 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
     };
 
     // requests a requet token with the given Url
-    this.getRequestToken = function(pUrl,callback)
+    this.getRequestToken = function(pUrl,pCallback)
     {
         accessor.tokenSecret = '';
 
@@ -183,41 +207,46 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
           requestToken = responseParams['oauth_token'];
           requestTokenSecret = responseParams['oauth_token_secret'];
           Ti.API.debug('request token got the following response: ' + client.responseText);
-          callback(client.responseText);
+          pCallback(client.responseText);
         };
         client.onerror = function(e){
           Ti.API.debug(e);
-          if(params.onError){
-            params.onError(e);
-          }
-          callback(null);
-        }
-        client.open('POST', pUrl, false);
+          Ti.API.debug({error:'[' + client.status + '] ' + client.responseText});
+          pCallback(null);
+        };
+        client.open('POST', pUrl, true);
         client.send(OAuth.getParameterMap(message.parameters));
-    }
+    };
 
     // unloads the UI used to have the user authorize the application
     var destroyAuthorizeUI = function()
     {
         Ti.API.debug('destroyAuthorizeUI');
         // if the window doesn't exist, exit
-        if (window == null) return;
+        if (!window) return;
 
         // remove the UI
         try
         {
 	        Ti.API.debug('destroyAuthorizeUI:webView.removeEventListener');
-            webView.removeEventListener('load', authorizeUICallback);
-	        Ti.API.debug('destroyAuthorizeUI:window.close()');
-            window.hide();
-			// 	        Ti.API.debug('destroyAuthorizeUI:window.remove(view)');
-			// window.remove(view);
-			// 	        Ti.API.debug('destroyAuthorizeUI:view.remove(webView)');
-			// 	        view.remove(webView);
-			// 	        Ti.API.debug('destroyAuthorizeUI:nullifying');
-			// 	        webView = null;
-			//             view = null;
-			//             window = null;
+          webView.removeEventListener('load', authorizeUICallback);
+          /**
+           * This is causing missing callbacks by some reasons but there
+           * is no choice to make things simpler... I would rather
+           * correct HTTPClient.open() for android so that it works
+           * correctly in sync mode....
+           */
+          window.hide();
+          Ti.API.debug('destroyAuthorizeUI:window.close()');
+          window.close();
+          Ti.API.debug('destroyAuthorizeUI:window.remove(view)');
+          window.remove(view);
+          Ti.API.debug('destroyAuthorizeUI:view.remove(webView)');
+          view.remove(webView);
+          Ti.API.debug('destroyAuthorizeUI:nullifying');
+          webView = null;
+          view = null;
+          window = null;
         }
         catch(ex)
         {
@@ -234,8 +263,7 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
         var val = webView.evalJS("document.getElementById('oauth_pin').innerHTML");
         if( val ){
           pin = val;
-          if (receivePinCallback) setTimeout(receivePinCallback, 100);
-          destroyAuthorizeUI();
+          if (receivePinCallback) receivePinCallback();
         }
     };
 
@@ -253,7 +281,7 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
             top: 5,
             width: 310,
             height: 450,
-            border: 10,
+            border: 5,
             backgroundColor: 'white',
             borderColor: '#aaa',
             borderRadius: 20,
@@ -272,20 +300,25 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
             right: 12,
             height: 14
         });
-        window.open();
 
         webView = Ti.UI.createWebView({
             url: pUrl,
-			autoDetect:[Ti.UI.AUTODETECT_NONE]
+            top: closeLabel.height + closeLabel.top,
+            width: 300,
+            height: view.height - closeLabel.height - closeLabel.top - view.borderWidth * 4,
+            autoDetect:[Ti.UI.AUTODETECT_NONE]
         });
-		Ti.API.debug('Setting:['+Ti.UI.AUTODETECT_NONE+']');
+        Ti.API.debug('Setting:['+Ti.UI.AUTODETECT_NONE+']');
         webView.addEventListener('load', authorizeUICallback);
         view.add(webView);
 
-        closeLabel.addEventListener('click', destroyAuthorizeUI);
+        closeLabel.addEventListener('click', function(e){
+            destroyAuthorizeUI();
+        });
         view.add(closeLabel);
 
         window.add(view);
+        window.open();
 
         var animation = Ti.UI.createAnimation();
         animation.transform = Ti.UI.create2DMatrix();
@@ -293,7 +326,7 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
         view.animate(animation);
     };
 
-    this.getAccessToken = function(pUrl,callback)
+    this.getAccessToken = function(pUrl,pCallback)
     {
         accessor.tokenSecret = requestTokenSecret;
 
@@ -306,7 +339,7 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
 
         var parameterMap = OAuth.getParameterMap(message.parameters);
         for (var p in parameterMap)
-        Ti.API.debug(p + ': ' + parameterMap[p]);
+          Ti.API.debug(p + ': ' + parameterMap[p]);
 
         var client = Ti.Network.createHTTPClient();
         client.onload = function(){
@@ -315,16 +348,15 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
           accessTokenSecret = responseParams['oauth_token_secret'];
           Ti.API.debug('*** get access token, Response: ' + client.responseText);
           processQueue();
-          callback();
+          destroyAuthorizeUI();
+          pCallback();
         };
         client.onerror = function(e){
           Ti.API.debug(e);
-          if(params.onError){
-            params.onError(e);
-          }
-          callback();
-        }
-        client.open('POST', pUrl, false);
+          destroyAuthorizeUI();
+          pCallback();
+        };
+        client.open('POST', pUrl, true);
         client.send(parameterMap);
     };
 
@@ -418,12 +450,6 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
             Ti.API.debug('url for GET:'+pUrl);
         }
         var client = Ti.Network.createHTTPClient();
-        client.onerror = function(e){
-          Ti.API.debug(e);
-          if(params.onError){
-            params.onError(e);
-          }
-        }
         client.onload = function(){
           Ti.API.debug('*** sendStatus, Response: [' + client.status + '] ' + client.responseText);
           if ((""+client.status).match(/^20[0-9]/)) {
@@ -435,11 +461,15 @@ var OAuthAdapter = function(pConsumerSecret, pConsumerKey, pSignatureMethod)
               params.onError({error:'[' + client.status + '] ' + client.responseText});
             }
           }
-        }
-        client.open(pMethod, pUrl, false);
+        };
+        client.onerror = function(e){
+          Ti.API.debug(e);
+          if(params.onError){
+            params.onError(e);
+          }
+        };
+        client.open(pMethod, pUrl, true);
         client.send(parameterMap);
-
-        return null;
     };
     this.send = send;
 };
diff --git a/lib/twitter_api.js b/lib/twitter_api.js
index c20a30f..759f58a 100644
--- a/lib/twitter_api.js
+++ b/lib/twitter_api.js
@@ -1,7 +1,7 @@
 // Twitter API Wrapper
-Ti.include('sha1.js');
-Ti.include('oauth.js');
-Ti.include('oauth_adapter.js');
+Ti.include(path_lib+'sha1.js');
+Ti.include(path_lib+'oauth.js');
+Ti.include(path_lib+'oauth_adapter.js');
 
 var TwitterApi = function(params){
   var self = this;
@@ -26,7 +26,9 @@ var TwitterApi = function(params){
         });
       };
       oAuthAdapter.getRequestToken('https://api.twitter.com/oauth/request_token', function(token){
-        oAuthAdapter.showAuthorizeUI('https://api.twitter.com/oauth/authorize?' + token , receivePin);
+        if(token){
+          oAuthAdapter.showAuthorizeUI('https://api.twitter.com/oauth/authorize?' + token , receivePin);
+        }
       });
     }
   };
@@ -70,18 +72,29 @@ var TwitterApi = function(params){
         response = JSON.parse(response);
         if (params && params.onSuccess){
           params.onSuccess(response);
+        }else{
+          Ti.API.error('no success handler');
         }
       },
       onError:function(error){
         if (params.onError){
           params.onError(error);
         }else{
+          Ti.API.error('no error handler');
           Ti.API.error(error);
         }
       }
     });
   };
 
+  this.clear_accesstoken = function(){
+    self.oAuthAdapter.clearAccessToken('twitter');
+  };
+
+  this.clear_actionsqueue = function(){
+    self.oAuthAdapter.clearActionsQueue();
+  };
+
   /**
     Twitter APIs
     We can use same parameter of Twitter API. 
-- 
1.7.4.1

